// prisma/schema.prisma

// ================================
// PRISMA: Generador y datasource
// ================================
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

// =========================
// Enums (globales)
// =========================

enum Role {
  ADMIN
  CONTADOR
  EMPRESA
}

enum TenantType {
  PERSONAL
  COMPANY
}

enum TenantRole {
  OWNER
  COLLABORATOR
  ACCOUNTANT
  EMPRESA_USER
}

enum DebeHaber {
  DEBE
  HABER
}

enum PrincipalDetalle {
  P
  D
}

enum TipoNomen {
  BALANCE_GENERAL
  ESTADO_RESULTADOS
  CAPITAL
}

enum Naturaleza {
  ACTIVO
  PASIVO
  CAPITAL
  INGRESOS
  COSTOS
  GASTOS
  OTROS_INGRESOS
  OTROS_GASTOS
  REVISAR
}

enum TaskEstado {
  PRIORIDAD
  PENDIENTE
  EN_TRABAJO
  REALIZADO
}

// Empresa
enum RazonSocial {
  Individual
  Juridico
}

// Contabilidad (Nuevo Enum)
enum DocumentoOperacion {
  compra
  venta
}

// =========================
// Usuarios / Tenancy
// =========================

model User {
  id                     Int            @id @default(autoincrement())
  username               String         @unique
  email                  String         @unique
  passwordHash           String
  role                   Role
  name                   String?
  phone                  String?
  companyName            String?
  nit                    String?
  dpi                    String?
  appointmentDate        DateTime?
  prestationType         String?
  status                 String?
  country                String?
  address                String?
  photoUrl               String?
  photoPublicId          String?
  createdAt              DateTime       @default(now())

  memberships            Membership[]
  tenantsCreated         Tenant[]       @relation("UserCreatedTenants")

  tareasAsignadas        Tarea[]

  nomenclaturasCreadas   Nomenclatura[] @relation("UserOwnedNomenclaturas")
}

model Tenant {
  id                     Int            @id @default(autoincrement())
  type                   TenantType
  slug                   String         @unique
  displayName            String
  createdById            Int

  createdBy              User           @relation("UserCreatedTenants", fields: [createdById], references: [id])

  memberships            Membership[]
  createdAt              DateTime       @default(now())

  nomenclaturas          Nomenclatura[]
  regimenIvaFilas        RegimenIvaFila[]
  regimenIsrFilas        RegimenIsrFila[]
  tareas                 Tarea[]
}

model Membership {
  userId                 Int
  tenantId               Int
  role                   TenantRole     @default(OWNER)

  user                   User           @relation(fields: [userId], references: [id])
  tenant                 Tenant         @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId])
}

// =========================
// Contabilidad
// =========================

model Nomenclatura {
  id                     Int            @id @default(autoincrement())
  tenantId               Int
  localId                Int
  ownerUserId            Int?
  nombre                 String
  descripcion            String?
  versionGNIO            String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  tenant                 Tenant         @relation(fields: [tenantId], references: [id])

  ownerUser              User?          @relation("UserOwnedNomenclaturas", fields: [ownerUserId], references: [id])

  cuentas                NomenclaturaCuenta[]

  empresasAfiliadas      Afiliaciones[] @relation("Afiliaciones_Nomenclatura")

  @@unique([tenantId, localId])
  @@index([tenantId, localId])
  @@index([tenantId])
}

model NomenclaturaCuenta {
  id                     Int            @id @default(autoincrement())
  nomenclaturaId         Int
  orden                  Int
  cuenta                 String
  descripcion            String
  debeHaber              String
  principalDetalle       String
  nivel                  Int
  tipo                   String
  naturaleza             String

  lockCuenta             Boolean        @default(false)
  lockDescripcion        Boolean        @default(false)
  lockDebeHaber          Boolean        @default(false)
  lockPrincipalDetalle   Boolean        @default(false)
  lockNivel              Boolean        @default(false)
  lockTipo               Boolean        @default(false)
  lockNaturaleza         Boolean        @default(false)
  lockAdd                Boolean        @default(true)
  lockDelete             Boolean        @default(true)
  isPlantilla            Boolean        @default(false)

  nomenclatura           Nomenclatura   @relation(fields: [nomenclaturaId], references: [id])

  cuentasBancarias       CuentaBancaria[]

  @@index([nomenclaturaId, orden])
}

model Cuenta {
  uuid                   String         @id @db.Char(36)
  cuenta                 String
  descripcion            String?

  partidas               Partida[]
}

model TipoPoliza {
  id                     Int            @id @default(autoincrement())
  nombre                 String
  estado                 Int            @default(1)
  asientos               AsientoContable[]
}

model AsientoContable {
  id                     Int            @id @default(autoincrement())
  correlativo            Int
  tipoPolizaId           Int
  descripcion            String?
  referencia             String?
  fecha                  DateTime       @db.Date
  estado                 Int            @default(1)
  empresaId              Int

  empresa                Empresa        @relation(fields: [empresaId], references: [id])
  tipoPoliza             TipoPoliza     @relation(fields: [tipoPolizaId], references: [id])
  partidas               Partida[]

  @@index([empresaId])
  @@index([fecha])
  @@map("asientos_contables")
}

model Partida {
  uuid                   String         @id @db.Char(36)
  montoDebe              Decimal        @db.Decimal(20, 2)
  montoHaber             Decimal        @db.Decimal(20, 2)
  referencia             String?
  cuentaId               String
  empresaId              Int?
  asientoContableId      Int

  empresa                Empresa?       @relation(fields: [empresaId], references: [id])
  cuenta                 Cuenta         @relation(fields: [cuentaId], references: [uuid])
  asiento                AsientoContable @relation(fields: [asientoContableId], references: [id])

  @@index([asientoContableId])
  @@index([referencia])
  @@map("partidas")
}

// üî¥ AQU√ç EST√Å EL CAMBIO
model Documento {
  uuid                   String         @id @default(uuid()) @db.Char(36)
  identificadorUnico     String         @unique
  fechaEmision           DateTime       @db.Date
  numeroAutorizacion     String?
  tipoDte                String
  serie                  String?
  numeroDte              String
  nitEmisor              String?
  nombreEmisor           String?
  codigoEstablecimiento  String?
  nombreEstablecimiento  String?
  idReceptor             String?
  nombreReceptor         String?
  nitCertificador        String?
  nombreCertificador     String?
  moneda                 String
  montoTotal             Decimal        @db.Decimal(20, 2)
  montoBien              Decimal        @db.Decimal(20, 2)
  montoServicio          Decimal        @db.Decimal(20, 2)
  facturaEstado          String?
  marcaAnulado           Boolean        @default(false)
  fechaAnulacion         DateTime?      @db.Date
  iva                    Decimal?       @db.Decimal(20, 2)
  petroleo               Decimal?       @db.Decimal(20, 2)
  turismoHospedaje       Decimal?       @db.Decimal(20, 2)
  turismoPasajes         Decimal?       @db.Decimal(20, 2)
  timbrePrensa           Decimal?       @db.Decimal(20, 2)
  bomberos               Decimal?       @db.Decimal(20, 2)
  tasaMunicipal          Decimal?       @db.Decimal(20, 2)
  bebidasAlcoholicas     Decimal?       @db.Decimal(20, 2)
  tabaco                 Decimal?       @db.Decimal(20, 2)
  cemento                Decimal?       @db.Decimal(20, 2)
  bebidasNoAlcoholicas   Decimal?       @db.Decimal(20, 2)
  tarifaPortuaria        Decimal?       @db.Decimal(20, 2)
  tipoOperacion          DocumentoOperacion @default(compra)
  cuentaDebe             String?
  cuentaHaber            String?
  tipo                   String         @default("bien")
  empresaId              Int
  fechaTrabajo           DateTime       @db.Date
  estado                 Int            @default(1)
  comentario             String?

  empresa                Empresa        @relation(fields: [empresaId], references: [id])

  @@index([empresaId])
  @@index([fechaTrabajo])
  @@index([numeroDte])
  @@map("documentos")
}

// =========================
// Tareas
// =========================

model Tarea {
  id                     Int            @id @default(autoincrement())
  tenantId               Int
  userId                 Int
  titulo                 String
  estado                 TaskEstado     @default(PENDIENTE)
  tipo                   String?
  fecha                  DateTime?
  recordatorio           Boolean        @default(false)
  empresa                String?

  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  tenant                 Tenant         @relation(fields: [tenantId], references: [id])
  user                   User           @relation(fields: [userId], references: [id])

  @@index([tenantId, userId, estado, fecha])
}

// =========================
// Empresas
// =========================

model Empresa {
  id                     Int            @id @default(autoincrement())
  tenant                 String
  nombre                 String
  nit                    String
  sectorEconomico        String
  razonSocial            RazonSocial
  avatarUrl              String?

  infoIndividual         Json?
  infoJuridico           Json?
  direccionFiscal        Json?
  contacto               Json?

  correlativoContador    Int            @default(0)

  afiliaciones           Afiliaciones?  @relation(fields: [afiliacionesId], references: [id])
  afiliacionesId         Int?           @unique
  gestiones              Gestiones?     @relation(fields: [gestionesId], references: [id])
  gestionesId            Int?           @unique

  cuentasBancarias       CuentaBancaria[]

  documentos             Documento[]
  asientos               AsientoContable[]
  partidas               Partida[]

  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@index([tenant, nit], name: "idx_empresa_tenant_nit")
}

model Afiliaciones {
  id                     Int            @id @default(autoincrement())
  empresa                Empresa?

  regimenIvaId           Int?
  regimenIsrId           Int?
  nomenclaturaId         Int?

  regimenIva             RegimenIvaFila? @relation("Afiliaciones_RegimenIva", fields: [regimenIvaId], references: [id])
  regimenIsr             RegimenIsrFila? @relation("Afiliaciones_RegimenIsr", fields: [regimenIsrId], references: [id])
  nomenclatura           Nomenclatura?  @relation("Afiliaciones_Nomenclatura", fields: [nomenclaturaId], references: [id])

  obligaciones           Obligacion[]

  @@index([regimenIvaId])
  @@index([regimenIsrId])
  @@index([nomenclaturaId])
}

model Obligacion {
  id                     Int            @id @default(autoincrement())
  afiliaciones           Afiliaciones   @relation(fields: [afiliacionesId], references: [id])
  afiliacionesId         Int
  impuesto               String
  codigoFormulario       String?
  fechaPresentacion      DateTime?
  nombreObligacion       String?
}

model Gestiones {
  id                     Int            @id @default(autoincrement())
  empresa                Empresa?
  folios                 FolioLibro[]
  correlativos           Json?
}

model FolioLibro {
  id                     Int            @id @default(autoincrement())
  gestiones              Gestiones      @relation(fields: [gestionesId], references: [id])
  gestionesId            Int
  libro                  String
  disponibles            Int            @default(0)
  usados                 Int            @default(0)
  ultimaFecha            DateTime?
}

model CuentaBancaria {
  id                     Int            @id @default(autoincrement())
  empresa                Empresa        @relation(fields: [empresaId], references: [id])
  empresaId              Int

  numero                 String
  banco                  String
  descripcion            String?
  moneda                 String
  saldoInicial           Decimal        @db.Decimal(18, 2)

  cuentaContableId       Int?
  cuentaContable         NomenclaturaCuenta? @relation(fields: [cuentaContableId], references: [id])

  @@index([empresaId])
  @@index([cuentaContableId])
}

model RegimenIvaFila {
  id                     Int            @id @default(autoincrement())
  orden                  Int
  idRegimen              Int
  regimenSistema         String
  nombreRegimen          String
  nombreComun            String
  porcentajeIva          Float
  periodo                String
  presentaAnual          String
  limiteSalarioActual    Float
  cantidadSalariosAnio   Float
  limiteFacturacionAnual Float
  lugarVenta             String
  tipoActividad          String
  opcionSujetoRetencionIva String
  porcentajeRetencionIva Float
  montoRetencionMayorIgual Float
  opcionExentoIva        String
  presentaFacturas       String
  retencionIva           String
  retencionIsr           String
  presentanIso           String
  presentaInventarios    String
  libroCompras           String
  libroVentas            String
  libroDiario            String
  libroDiarioDetalle     String
  libroMayor             String
  balanceGeneralEstadoResult String
  estadosFinancieros     String
  conciliacionBancaria   String
  asientoContable        String
  tenantId               Int?
  tenant                 Tenant?        @relation(fields: [tenantId], references: [id])
  isSeed                 Boolean        @default(true)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  afiliacionesIVA        Afiliaciones[] @relation("Afiliaciones_RegimenIva")

  @@index([tenantId])
}

model RegimenIsrFila {
  id                     Int            @id @default(autoincrement())
  orden                  Int
  idRegimen              Int
  regimenSistema         String
  nombreRegimen          String
  nombreComun            String
  porcentajeIsr          Float
  paraIsrDe              Float
  hastaIsrDe             Float
  periodo                String
  presentaAnual          String
  limiteSalarioActual    Float
  cantidadSalariosAnio   Float
  limiteFacturacionAnual Float
  lugarVenta             String
  tipoActividad          String
  opcionSujetoRetencionIsr String
  presentaFacturas       String
  retencionIva           String
  retencionIsr           String
  presentanIso           String
  presentaInventarios    String
  libroCompras           String
  libroVentas            String
  libroDiario            String
  libroDiarioDetalle     String
  libroMayor             String
  balanceGeneralEstadoResult String
  estadosFinancieros     String
  conciliacionBancaria   String
  asientoContable        String
  tenantId               Int?
  tenant                 Tenant?        @relation(fields: [tenantId], references: [id])
  isSeed                 Boolean        @default(true)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  afiliacionesISR        Afiliaciones[] @relation("Afiliaciones_RegimenIsr")

  @@index([tenantId])
}
